/**
	@mainpage XBee Firmware Library 1.5.7 Overview
	
	The XBee Firmware Library is an extensive and specific API provided to 
	facilitate the development of programmable XBee applications.
	
	@section main_api_section Overview of XBee interfaces and functional modules
	
	- \ref api_1_wire
		- \ref api_1_wire_driver
		- \ref api_1_wire_components
			- \ref api_1_wire_ds18b20
			- \ref api_1_wire_ds1904
	
	- \ref api_adc
	
	- \ref api_cpu
		- \ref cpu_flash
		- \ref cpu_pm
		- \ref cpu_system
		- \ref api_lvd
	
	- \ref api_eeprom
		- \ref api_24xxx_eeprom
		- \ref api_25xxx_eeprom
		- \ref api_virtual_eeprom
	
	- \ref api_gpios	
		- \ref api_gpios_gpio
		- \ref api_gpios_irq
		- \ref api_gpios_port
	
	- \ref api_timer
	
	- \ref api_input_capture
	
	- \ref api_i2c
	
	- \ref api_output_compare
	
	- \ref api_pwm
	
	- \ref api_rtc
	
	- \ref api_spi
		
	- \ref api_uart
	
	Apart from the internal modules and interfaces, the XBee Firmware Library 
	provides also drivers for some external devices that can be 
	connected and managed by the XBee module:
	
	- \ref api_display_graphic
	
	- \ref api_char_lcd
	
	- \ref mpr121_keyboard
	
	Other references to the Firmware Library:
	- \ref types
	
	@section zigbee_api_section Overview of Cross-Platform, ANSI C, XBee/ZigBee Driver
	
	The driver is broken up into multiple layers, with well-defined interfaces
	between each layer.

	The two parts of the driver are similar to an Ethernet NIC driver and a
	TCP/IP networking stack.  In our case, the \ref xbee "XBee Driver"
	handles all serial communication with and configuration of the attached
	XBee device, the \ref wpan "Wireless Personal Networking" layer provides
	generic 802.15.4 networking support (endpoints and clusters), and the
	\ref zigbee "ZigBee Networking Stack" layer provides support for the ZigBee
	networking protocols.

	These layers make use of a \ref hal "Hardware Abstraction Layer" that must
	be created for each hardware/compiler platform.

	See the \link modules.html Modules \endlink section for a full outline of
	the API layers.

	\section wpan_overview WPAN Overview

	\par Endpoint Table
	The endpoint table is a complex data structure that describes all endpoints,
	clusters, ZCL attributes and manufacturer-specific command handlers for a
	given device.  The structure of the table is as follows (note that not all
	members of each object are listed):
	-	Each DEVICE (wpan_dev_t) corresponds to a local, serially-connected XBee
		module.  This DEVICE has multiple ENDPOINTs.
	-	Each ENDPOINT (wpan_endpoint_table_entry_t) has
		-	An ENDPOINT ID (0 to 254), PROFILE ID, DEVICE ID and DEVICE VERSION.
		-	Multiple CLUSTERs.  The ZDP endpoint handler currently uses a switch
			to handle frames for each cluster, but could be updated to let the
			endpoint dispatcher hand frames off to each cluster's handler.
		-	A HANDLER to process frames for CLUSTERs without their own HANDLER,
			or CLUSTERs that aren't in the table.
		-	A pointer to an ENDPOINT STATE (wpan_ep_state_t) structure.
	-	Each CLUSTER (wpan_cluster_table_entry_t) has
		-	FLAGs indicating whether it is an input or output cluster (or both),
			and whether packets sent to/from the cluster require APS-layer
			encryption.
		-	A HANDLER to process frames for that cluster.
		-	A CONTEXT pointer that is passed to the HANDLER.  For a ZCL endpoint,
			the CONTEXT points to an ATTRIBUTE TREE.

	-	On ZCL endpoints, each entry in the ATTRIBUTE TREE (zcl_attribute_tree_t)
		has
		-	A manufacturer ID with ZCL_MFG_NONE (0) representing the general
			attributes for the cluster.
		-	Pointers to a list of SERVER and CLIENT cluster ATTRIBUTEs.
	-	Each ATTRIBUTE is either a BASE ATTRIBUTE (zcl_attribute_base_t) with
		-	A 16-bit ID.
		-	FLAGS indicating whether the attribute is read-only, is a full
			attribute (see below), has a minimum or maximum limit and is
			reportable.
		-	A ZCL TYPE.
		-	A pointer to the ATTRIBUTE's VALUE.
	-	... or a FULL ATTRIBUTE (zcl_attribute_full_t) which has
		-	A BASE ATTRIBUTE structure (so both BASE and FULL attributes start
			with the same structure elements).
		-	Optional MINIMUM and MAXIMUM (zcl_attribute_minmax_t) values.
		-	A READ function (zcl_attribute_update_fn) to refresh the
			ATTRIBUTE's VALUE.
		-	A WRITE function (zcl_attribute_write_fn) to process a ZCL Write
			Attributes request if the attribute requires additional processing
			over what the standard function, zcl_decode_attribute, does.

	\par Endpoint Dispatching
	The endpoint dispatcher searches the endpoint table to find a handler for
	a given frame, based on its destination endpoint and cluster ID.

	\section zigbee_overview ZigBee Overview

	\par ZDO/ZDP (ZigBee Device Object/Profile) Command Processing
	The ZDO endpoint handler (registered to endpoint 0) walks the endpoint table
	to respond to requests.  It needs to know about all endpoints and their
	input clusters and output clusters.  It walks the endpoint table but stops
	at the context elements.  Therefore, all information required by the ZDO
	layer must exist outside of the context elements of the endpoint table.

	\par ZCL (ZigBee Cluster Library) Command Processing
	Consider a theoretical cluster with manufacturer-specific attributes and
	commands for more than one manufacturer ID.  The handler registered to that
	cluster would check the frame type and manufacturer-specific bits and hand
	any GENERAL/PROFILE or MANUFACTURER-SPECIFIC commands off to the
	ZCL General Command Handler (zcl_general_command).

	\par ZCL General Command Handler
	This handler will see frames from the endpoint dispatcher for
		-	Clusters that aren't in the cluster table for the endpoint (invalid
			clusters).
		-	Clusters that don't have their own handler (no cluster commands).

	It also receives frames from clusters with handlers for cluster-specific
	commands that are passing on a general or manufacturer-specific command
	frame.

	The ZCL General Command handler finds the correct attribute list from the
	attribute tree (general vs. manufacturer-specific, server vs. client
	cluster), and then
	-	If the frame is marked CLUSTER & MANUFACTURER-SPECIFIC, it passes the
		frame on to the handler for that MFG ID (stored in the attribute
		tree).
	-	If it is marked CLUSTER-SPECIFIC but GENERAL, it generates an error.
	-	If it is marked PROFILE-SPECIFIC and GENERAL, it processes the frame as
		a general command, using the attribute list it retreived from the tree.

	\par Summary of ZCL handlers
	-	ZCL General Command handler registered to the endpoint to process frames
		for invalid clusters or clusters without cluster-specific commands (i.e.,
		clusters with a NULL command handler).
	-	Cluster-specific, general command handler registered to each cluster.
	-	Cluster-specific, manufacturer-specific command handler(s) listed in
		the attribute tree (stored in the cluster structure's context member)
		under the appropriate manufacturer ID.
*/

/**
	@defgroup hal Hardware Abstraction Layer (HAL)

	@{
		@defgroup hal_rabbit Rabbit/Dynamic C
		@defgroup hal_win32 Win32/cygwin/gcc
		@defgroup hal_freescale Freescale/Codewarrior (Programmable XBee)
		@defgroup hal_dos DOS16/OpenWatcom
	@}

	@defgroup util Utility/Support Code
	@{
		@defgroup util_cbuf Circular Buffer
		@defgroup util_byteorder Byte-swapping functions
		@defgroup util_xmodem XMODEM code used by the firmware update process
	@}

	@defgroup xbee XBee Interface
	@{
		@defgroup xbee_serial Serial Interface
		@defgroup xbee_device Device Interface

		This layer provides a frame-based interface to the XBee module.  It uses a
		table of frame handlers to dispatch complete frames to higher layers of
		the API.  If built with a dynamic

		@defgroup xbee_atcmd AT Commands

		This layer wraps the AT request/response frames to provide an easy method
		for querying/setting registers on, and sending AT commands to the XBee.

		@defgroup xbee_atmode AT Mode

		This network stack was designed for use with XBee modules in API mode,
		but it is sometimes necessary to work with a module in AT mode (for
		example, performing DigiMesh firmware updates).

		@defgroup xbee_commissioning XBee-specific support of ZCL Commissioning
		Cluster

		@defgroup xbee_discovery Node Discovery

		This layer manages ATND responses and 0x95 frames related to proprietary
		(XBee-only) node discovery methods used in ZigBee firmware (not supported
		in Smart Energy firmware builds).

		@defgroup xbee_firmware Firmware Updates

		This layer makes use of lower layers to perform updates on XBee modules.
		Both file formats are supported -- .ebl  (ZNet, ZigBee, Smart Energy)
		and .oem (DigiMesh).

		@defgroup xbee_digi_data Digi Data Endpoint
		@{
			@defgroup xbee_transparent Transparent Serial Cluster

			Support code for Transparent Serial Cluster of Digi Data Endpoint

			@defgroup xbee_ota Over-The-Air Firmware Update Cluster

			Support code for performing over-the-air firmware updates on a
			Programmable XBee module.
			@{
				@defgroup xbee_ota_server Server

				Code for the Programmable XBee to receive over-the-air firmware
				updates.

				@defgroup xbee_ota_client Client

				Code for a device to send over-the-air firmware updates to a
				Programmable XBee.
			@}
		@}

		@defgroup xbee_wpan Glue layer between XBee Device driver and WPAN
		network stack.
	@}

	@defgroup wpan Wireless Personal Area Networking (WPAN)
	@{
		@defgroup wpan_aps Cluster/Endpoint layer
		@defgroup wpan_types Datatypes and support functions
	@}
	@defgroup zigbee ZigBee Networking
	@{
		@defgroup zdo ZigBee Data Object/ZigBee Device Profile
		@defgroup zcl ZigBee Cluster Library
		@{
			@defgroup zcl_64 64-bit integer support
			@defgroup zcl_types Datatypes
			@defgroup zcl_client Cluster Client support code
			@defgroup zcl_clusters Clusters
			@{
				@defgroup zcl_basic Basic Cluster
				@defgroup zcl_commissioning Commissioning Cluster
				@defgroup zcl_identify Identify Cluster
				@defgroup zcl_onoff On/Off Cluster
				@defgroup zcl_reporting Attribute Reporting (incomplete)
				@defgroup zcl_time Time Cluster
			@}
		@}

	@}

	@defgroup api_1_wire
	@section api_1_wire_overview 1-Wire Overview
	This API contains the functions to configure and control the 1-Wire 
	capability of the Programmable XBee \b S2B/S2C devices. The 1-Wire API 
	contains the following sub-modules:
		- \ref api_1_wire_driver
		- \ref api_1_wire_components
			- \ref api_1_wire_ds18b20
			- \ref api_1_wire_ds1904

	@defgroup api_1_wire 1-Wire
	@{
		@defgroup api_1_wire_driver			1-Wire driver
		@defgroup api_1_wire_components		1-Wire components
	@}

	@defgroup api_1_wire_components
	@section api_1_wire_components_overview 1-Wire Components Overview
	The 1 Wire capability for the Programmable XBee \b S2B/S2C devices 
	contains the drivers to configure and control the following 1 Wire 
	devices:
		- \ref api_1_wire_ds18b20
		- \ref api_1_wire_ds1904

	@defgroup api_1_wire_components 1-Wire Components
	@{
		@defgroup api_1_wire_ds18b20	DS18B20 digital thermometer
		@defgroup api_1_wire_ds1904		DS1904 Real-Time Clock
	@}

	@defgroup api_adc Analog Digital Converter (ADC)

	@defgroup api_eeprom
	@section api_eeprom_overview EEPROM Overview
	This API contains the functions to configure and control the EEPROM module 
	of the Programmable XBee \b S2B/S2C devices. The EEPROM module has the 
	following sub-modules:
		- \ref api_virtual_eeprom
		- \ref api_24xxx_eeprom
		- \ref api_25xxx_eeprom

	@defgroup api_eeprom EEPROM 
	@{
		@defgroup api_virtual_eeprom	Virtual EEPROM
		@defgroup api_24xxx_eeprom		24xxx EEPROM
		@defgroup api_25xxx_eeprom		25AAxxxx/25LCxxxx EEPROM
	@}

	@defgroup api_gpios
	@section gpio_overview GPIO API Overview
	This API contains the functions to configure and control the GPIO module 
	of the Programmable XBee \b S2B/S2C devices. The GPIO module has the 
	following sub-modules:
		- \ref api_gpios_gpio
		- \ref api_gpios_irq
		- \ref api_gpios_port

	@defgroup api_gpios General Purpose Input/Output (GPIO)
	@{
		@defgroup api_gpios_irq			Interrupt ReQuest Control (IRQ)
		@defgroup api_gpios_port		Port
		@defgroup api_gpios_gpio		Standard GPIO
	@}
	
	@defgroup api_timer High Resolution Timer
	
	@defgroup api_i2c Inter-Integrated Circuit (I2C)

	@defgroup api_rtc Real Time Clock (RTC)

	@defgroup api_uart Universal Asynchronous Receiver-Transmitter (UART)

	@defgroup api_spi Serial Peripheral Interface (SPI)

	@defgroup api_pwm Pulse-Width Modulation (PWM)
	
	@defgroup api_input_capture Input Capture component
	
	@defgroup api_output_compare Output Compare component

	@defgroup api_misc	Miscellaneous functions

	@defgroup api_cpu
	@section api_cpu_overview CPU API Overview
	This API contains the functions to configure and control the different CPU 
	modules and functionality. The CPU module has the following sub-modules:
		- \ref cpu_flash
		- \ref cpu_pm
		- \ref cpu_system
		- \ref api_lvd

	@defgroup api_cpu CPU Drivers
	@{
		@defgroup cpu_flash 	Flash
		@defgroup cpu_pm 	Power Management (PM)
		@defgroup cpu_system 	System	
		@defgroup api_lvd	Low-Voltage Detection (LVD)
	@}

	@defgroup api_display_graphic LCD Display (SPI)

	@defgroup api_char_lcd Character LCD

	@defgroup mpr121_keyboard	Capacitive Board (I2C)
*/
